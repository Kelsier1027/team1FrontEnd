// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace team1FrontEnd.Server.Models;

public partial class dbTeam1Context : DbContext
{
    public dbTeam1Context(DbContextOptions<dbTeam1Context> options)
        : base(options)
    {
    }

    public virtual DbSet<AdminRole> AdminRoles { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<Attraction> Attractions { get; set; }

    public virtual DbSet<AttractionCart> AttractionCarts { get; set; }

    public virtual DbSet<AttractionCartItem> AttractionCartItems { get; set; }

    public virtual DbSet<AttractionCategory> AttractionCategories { get; set; }

    public virtual DbSet<AttractionContentContext> AttractionContentContexts { get; set; }

    public virtual DbSet<AttractionContentImage> AttractionContentImages { get; set; }

    public virtual DbSet<AttractionImage> AttractionImages { get; set; }

    public virtual DbSet<AttractionOrder> AttractionOrders { get; set; }

    public virtual DbSet<AttractionOrderStatus> AttractionOrderStatuses { get; set; }

    public virtual DbSet<AttractionTicket> AttractionTickets { get; set; }

    public virtual DbSet<AttractionTicketStock> AttractionTicketStocks { get; set; }

    public virtual DbSet<AttractionTicketType> AttractionTicketTypes { get; set; }

    public virtual DbSet<AttrationOrderItem> AttrationOrderItems { get; set; }

    public virtual DbSet<Beadmin> Beadmins { get; set; }

    public virtual DbSet<Bill> Bills { get; set; }

    public virtual DbSet<BillItem> BillItems { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<CarBrand> CarBrands { get; set; }

    public virtual DbSet<CarEnergyType> CarEnergyTypes { get; set; }

    public virtual DbSet<CarModel> CarModels { get; set; }

    public virtual DbSet<CarModelImage> CarModelImages { get; set; }

    public virtual DbSet<CarOrder> CarOrders { get; set; }

    public virtual DbSet<CarOrderStatus> CarOrderStatuses { get; set; }

    public virtual DbSet<CarStatus> CarStatuses { get; set; }

    public virtual DbSet<CarTransmission> CarTransmissions { get; set; }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<CartItem> CartItems { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<CommentImage> CommentImages { get; set; }

    public virtual DbSet<District> Districts { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    public virtual DbSet<Hotel> Hotels { get; set; }

    public virtual DbSet<HotelCategory> HotelCategories { get; set; }

    public virtual DbSet<HotelImage> HotelImages { get; set; }

    public virtual DbSet<HotelOrder> HotelOrders { get; set; }

    public virtual DbSet<HotelOrderCancelReason> HotelOrderCancelReasons { get; set; }

    public virtual DbSet<HotelOrderItem> HotelOrderItems { get; set; }

    public virtual DbSet<HotelOrderStatus> HotelOrderStatuses { get; set; }

    public virtual DbSet<HotelRoom> HotelRooms { get; set; }

    public virtual DbSet<HotelRoomImage> HotelRoomImages { get; set; }

    public virtual DbSet<HotelType> HotelTypes { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<MemberActivityRecord> MemberActivityRecords { get; set; }

    public virtual DbSet<MemberLevel> MemberLevels { get; set; }

    public virtual DbSet<MemberPersonalInfo> MemberPersonalInfos { get; set; }

    public virtual DbSet<MemberProfile> MemberProfiles { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<PackageAttractionItem> PackageAttractionItems { get; set; }

    public virtual DbSet<PackageHotelRoomItem> PackageHotelRoomItems { get; set; }

    public virtual DbSet<PackageMemo> PackageMemos { get; set; }

    public virtual DbSet<PackageOrder> PackageOrders { get; set; }

    public virtual DbSet<PackageOrderDetail> PackageOrderDetails { get; set; }

    public virtual DbSet<PackageOrderStatus> PackageOrderStatuses { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<PointTransction> PointTransctions { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<RolePermission> RolePermissions { get; set; }

    public virtual DbSet<ServiceCategory> ServiceCategories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdminRole>(entity =>
        {
            entity.HasOne(d => d.Admin).WithMany(p => p.AdminRoles)
                .HasForeignKey(d => d.AdminId)
                .HasConstraintName("FK_AdminRoles_Admins");

            entity.HasOne(d => d.Role).WithMany(p => p.AdminRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AdminRoles_Roles");
        });

        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.Property(e => e.RoleId).IsRequired();

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Attraction>(entity =>
        {
            entity.Property(e => e.Address).IsRequired();
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Latitude).HasColumnName("latitude");
            entity.Property(e => e.Longitude).HasColumnName("longitude");
            entity.Property(e => e.Name).IsRequired();

            entity.HasOne(d => d.AttractionCategory).WithMany(p => p.Attractions)
                .HasForeignKey(d => d.AttractionCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Attractions_AttractionCategories");
        });

        modelBuilder.Entity<AttractionCart>(entity =>
        {
            entity.ToTable("AttractionCart");

            entity.Property(e => e.Total).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<AttractionCartItem>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");

            entity.HasOne(d => d.Cart).WithMany(p => p.AttractionCartItems)
                .HasForeignKey(d => d.CartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionCartItems_AttractionCart");

            entity.HasOne(d => d.ItemsNavigation).WithMany(p => p.AttractionCartItems)
                .HasForeignKey(d => d.Items)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionCartItems_AttractionTickets");
        });

        modelBuilder.Entity<AttractionCategory>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_AttractionCategories_Name").IsUnique();

            entity.Property(e => e.Icon)
                .HasMaxLength(2000)
                .HasColumnName("icon");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<AttractionContentContext>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AttractionContexts");

            entity.Property(e => e.Qa).HasColumnName("QA");

            entity.HasOne(d => d.Attraction).WithMany(p => p.AttractionContentContexts)
                .HasForeignKey(d => d.AttractionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionContents_Attractions");
        });

        modelBuilder.Entity<AttractionContentImage>(entity =>
        {
            entity.Property(e => e.Image).IsRequired();
            entity.Property(e => e.ImageType)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Attraction).WithMany(p => p.AttractionContentImages)
                .HasForeignKey(d => d.AttractionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionContentImages_Attractions");
        });

        modelBuilder.Entity<AttractionImage>(entity =>
        {
            entity.Property(e => e.FileName)
                .IsRequired()
                .IsUnicode(false);

            entity.HasOne(d => d.Attraction).WithMany(p => p.AttractionImages)
                .HasForeignKey(d => d.AttractionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionImages_Attractions");
        });

        modelBuilder.Entity<AttractionOrder>(entity =>
        {
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.TicketTotalPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.AttractionOrderStatus).WithMany(p => p.AttractionOrders)
                .HasForeignKey(d => d.AttractionOrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionOrders_AttractionOrderStatuses");

            entity.HasOne(d => d.Member).WithMany(p => p.AttractionOrders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionOrders_Members");
        });

        modelBuilder.Entity<AttractionOrderStatus>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<AttractionTicket>(entity =>
        {
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Attraction).WithMany(p => p.AttractionTickets)
                .HasForeignKey(d => d.AttractionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionTickets_AttractionTickets");

            entity.HasOne(d => d.AttractionTicketType).WithMany(p => p.AttractionTickets)
                .HasForeignKey(d => d.AttractionTicketTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionTickets_AttractionTicketTypes");
        });

        modelBuilder.Entity<AttractionTicketStock>(entity =>
        {
            entity.Property(e => e.ReserveDate).HasColumnType("datetime");
            entity.Property(e => e.Stock).HasColumnName("stock");

            entity.HasOne(d => d.AttractionTicket).WithMany(p => p.AttractionTicketStocks)
                .HasForeignKey(d => d.AttractionTicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttractionTicketStocks_AttractionTickets");
        });

        modelBuilder.Entity<AttractionTicketType>(entity =>
        {
            entity.Property(e => e.Name).IsRequired();
        });

        modelBuilder.Entity<AttrationOrderItem>(entity =>
        {
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.AttractionOrder).WithMany(p => p.AttrationOrderItems)
                .HasForeignKey(d => d.AttractionOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttrationOrderItems_AttractionOrders");

            entity.HasOne(d => d.AttractionTicket).WithMany(p => p.AttrationOrderItems)
                .HasForeignKey(d => d.AttractionTicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AttrationOrderItems_AttractionTickets");
        });

        modelBuilder.Entity<Beadmin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Admins");

            entity.ToTable("BEAdmins");

            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.EncryptedPassword)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(40);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.VerificationCode)
                .HasMaxLength(36)
                .IsFixedLength();
        });

        modelBuilder.Entity<Bill>(entity =>
        {
            entity.ToTable("Bill");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DateTime).HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithMany(p => p.Bills)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bill_Members");
        });

        modelBuilder.Entity<BillItem>(entity =>
        {
            entity.ToTable("BillItem");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Bill).WithMany(p => p.BillItems)
                .HasForeignKey(d => d.BillId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BillItem_Bill");
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.Property(e => e.CarLicenceId)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.CarModel).WithMany(p => p.Cars)
                .HasForeignKey(d => d.CarModelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cars_CarModels");

            entity.HasOne(d => d.City).WithMany(p => p.Cars)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cars_Cities");
        });

        modelBuilder.Entity<CarBrand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Brands");

            entity.HasIndex(e => e.Name, "UQ_Brands_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarEnergyType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_EnergyTypes");

            entity.HasIndex(e => e.Name, "UQ_EnergyTypes_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarModel>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_CarModels_Name").IsUnique();

            entity.Property(e => e.MainImage).HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.CarBrand).WithMany(p => p.CarModels)
                .HasForeignKey(d => d.CarBrandId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarModels_CarBrands");

            entity.HasOne(d => d.CarEnergyType).WithMany(p => p.CarModels)
                .HasForeignKey(d => d.CarEnergyTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarModels_CarEnergyTypes");

            entity.HasOne(d => d.CarTransmission).WithMany(p => p.CarModels)
                .HasForeignKey(d => d.CarTransmissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarModels_CarTransmissions");
        });

        modelBuilder.Entity<CarModelImage>(entity =>
        {
            entity.Property(e => e.FileName).IsRequired();

            entity.HasOne(d => d.CarModel).WithMany(p => p.CarModelImages)
                .HasForeignKey(d => d.CarModelId)
                .HasConstraintName("FK_CarModelImages_CarModels");
        });

        modelBuilder.Entity<CarOrder>(entity =>
        {
            entity.HasOne(d => d.Admin).WithMany(p => p.CarOrders)
                .HasForeignKey(d => d.AdminId)
                .HasConstraintName("FK_CarOrders_Admins");

            entity.HasOne(d => d.Car).WithMany(p => p.CarOrders)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarOrders_Cars");

            entity.HasOne(d => d.CarOrderStatus).WithMany(p => p.CarOrders)
                .HasForeignKey(d => d.CarOrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarOrders_CarOrderStatuses");

            entity.HasOne(d => d.Member).WithMany(p => p.CarOrders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CarOrders_Members");
        });

        modelBuilder.Entity<CarOrderStatus>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_CarOrderStatuses_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarStatus>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_CarStatuses_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CarTransmission>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Transmissions");

            entity.HasIndex(e => e.Name, "UQ_Transmissions_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Cart");

            entity.HasOne(d => d.Member).WithMany(p => p.Carts)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Cart_Members");
        });

        modelBuilder.Entity<CartItem>(entity =>
        {
            entity.HasOne(d => d.Cart).WithMany(p => p.CartItems)
                .HasForeignKey(d => d.CartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CartItems_Carts");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_Cities_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.Property(e => e.CommentDateTime).HasColumnType("datetime");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Member).WithMany(p => p.Comments)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_Members1");

            entity.HasOne(d => d.ServiceCategory).WithMany(p => p.Comments)
                .HasForeignKey(d => d.ServiceCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comments_ServiceCategories");
        });

        modelBuilder.Entity<CommentImage>(entity =>
        {
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(2000);

            entity.HasOne(d => d.Comment).WithMany(p => p.CommentImages)
                .HasForeignKey(d => d.CommentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CommentImages_Comments");
        });

        modelBuilder.Entity<District>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_Districts_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.City).WithMany(p => p.Districts)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Districts_Cities");
        });

        modelBuilder.Entity<Gender>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Hotel>(entity =>
        {
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Grade).HasColumnType("decimal(3, 1)");
            entity.Property(e => e.HotelFacilities).IsRequired();
            entity.Property(e => e.MainImage)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .IsFixedLength();
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();

            entity.HasOne(d => d.District).WithMany(p => p.Hotels)
                .HasForeignKey(d => d.DistrictId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Hotels_Districts");

            entity.HasOne(d => d.HotelType).WithMany(p => p.Hotels)
                .HasForeignKey(d => d.HotelTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Hotels_HotelTypes");
        });

        modelBuilder.Entity<HotelCategory>(entity =>
        {
            entity.Property(e => e.Jaon)
                .IsRequired()
                .HasColumnName("JAON");
        });

        modelBuilder.Entity<HotelImage>(entity =>
        {
            entity.Property(e => e.FileName).IsRequired();

            entity.HasOne(d => d.Hotel).WithMany(p => p.HotelImages)
                .HasForeignKey(d => d.HotelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HotelImages_Hotels");
        });

        modelBuilder.Entity<HotelOrder>(entity =>
        {
            entity.Property(e => e.Checkin).HasColumnType("datetime");
            entity.Property(e => e.Checkout).HasColumnType("datetime");
            entity.Property(e => e.CreditCard)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.OrderSn)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Admin).WithMany(p => p.HotelOrders)
                .HasForeignKey(d => d.AdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HotelOrders_Admins");

            entity.HasOne(d => d.HotelOrderCancelReason).WithMany(p => p.HotelOrders)
                .HasForeignKey(d => d.HotelOrderCancelReasonId)
                .HasConstraintName("FK_HotelOrders_HotelOrderCancelReasons");

            entity.HasOne(d => d.HotelOrderStatus).WithMany(p => p.HotelOrders)
                .HasForeignKey(d => d.HotelOrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HotelOrders_HotelOrderStatuses");

            entity.HasOne(d => d.Member).WithMany(p => p.HotelOrders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HotelOrders_Members");
        });

        modelBuilder.Entity<HotelOrderCancelReason>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_HotelOrderCancelReasons_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<HotelOrderItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_HotelRoomOrderItems");

            entity.HasOne(d => d.HotelOrder).WithMany(p => p.HotelOrderItems)
                .HasForeignKey(d => d.HotelOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HotelOrderItems_HotelOrders");

            entity.HasOne(d => d.HotelRoom).WithMany(p => p.HotelOrderItems)
                .HasForeignKey(d => d.HotelRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HotelRoomOrderItems_HotelRooms");
        });

        modelBuilder.Entity<HotelOrderStatus>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_HotelOrderStatuses_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<HotelRoom>(entity =>
        {
            entity.Property(e => e.MainImage)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RoomFacilities).IsRequired();
            entity.Property(e => e.Size)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Hotel).WithMany(p => p.HotelRooms)
                .HasForeignKey(d => d.HotelId)
                .HasConstraintName("FK_HotelRooms_Hotels");
        });

        modelBuilder.Entity<HotelRoomImage>(entity =>
        {
            entity.Property(e => e.FileName).IsRequired();

            entity.HasOne(d => d.HotelRoom).WithMany(p => p.HotelRoomImages)
                .HasForeignKey(d => d.HotelRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HotelRoomImages_HotelRooms");
        });

        modelBuilder.Entity<HotelType>(entity =>
        {
            entity.HasIndex(e => e.Name, "UQ_HotelTypes_Name").IsUnique();

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasIndex(e => e.Account, "UQ_Members_Accont").IsUnique();

            entity.Property(e => e.Account)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength();
            entity.Property(e => e.EncryptedPassword)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.Salt).IsUnicode(false);
        });

        modelBuilder.Entity<MemberActivityRecord>(entity =>
        {
            entity.Property(e => e.ActivityTime).HasColumnType("datetime");
            entity.Property(e => e.Device).HasMaxLength(50);
            entity.Property(e => e.IpAddress)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Member).WithMany(p => p.MemberActivityRecords)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MemberActivityRecords_Members");
        });

        modelBuilder.Entity<MemberLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_MemberLevel");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MemberPersonalInfo>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(100);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.EmCname)
                .HasMaxLength(40)
                .HasColumnName("EmCName");
            entity.Property(e => e.EmCphone)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EmCPhone");
            entity.Property(e => e.Idnumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IDNumber");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Member).WithMany(p => p.MemberPersonalInfos)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_MemberPersonalInfos_Members");
        });

        modelBuilder.Entity<MemberProfile>(entity =>
        {
            entity.Property(e => e.Country).HasMaxLength(50);
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.DialCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.Member).WithMany(p => p.MemberProfiles)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_MemberProfiles_Members");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.Property(e => e.Alert).HasMaxLength(50);
            entity.Property(e => e.ApplyBeginDate).HasColumnType("datetime");
            entity.Property(e => e.ApplyEndDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PackageAttractionItem>(entity =>
        {
            entity.HasOne(d => d.Attraction).WithMany(p => p.PackageAttractionItems)
                .HasForeignKey(d => d.AttractionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageAttractionItems_Attractions");

            entity.HasOne(d => d.Package).WithMany(p => p.PackageAttractionItems)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageAttractionItems_Packages");
        });

        modelBuilder.Entity<PackageHotelRoomItem>(entity =>
        {
            entity.HasOne(d => d.HotelRoom).WithMany(p => p.PackageHotelRoomItems)
                .HasForeignKey(d => d.HotelRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageHotelRoomItems_HotelRooms");

            entity.HasOne(d => d.Package).WithMany(p => p.PackageHotelRoomItems)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageHotelRoomItems_Packages");
        });

        modelBuilder.Entity<PackageMemo>(entity =>
        {
            entity.Property(e => e.Breakfast)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.DaysMemo).IsRequired();
            entity.Property(e => e.Dinner)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Lunch)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.Package).WithMany(p => p.PackageMemos)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageMemos_Packages");
        });

        modelBuilder.Entity<PackageOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PackageOrdes");

            entity.Property(e => e.OrderDate).HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithMany(p => p.PackageOrders)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageOrdes_Members");

            entity.HasOne(d => d.Package).WithMany(p => p.PackageOrders)
                .HasForeignKey(d => d.PackageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageOrdes_Packages");

            entity.HasOne(d => d.PackageOrdeStatus).WithMany(p => p.PackageOrders)
                .HasForeignKey(d => d.PackageOrdeStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PackageOrdes_PackageOrderStatuses");
        });

        modelBuilder.Entity<PackageOrderDetail>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.IdNumber }).HasName("PK_PackageOrderDetail");

            entity.Property(e => e.IdNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Birthday).HasColumnType("datetime");
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PackageOrderStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PackageStatuses");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.Property(e => e.Category)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ChineseName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.NameInSystem)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PointTransction>(entity =>
        {
            entity.Property(e => e.Amount)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TransactionCategory)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Member).WithMany(p => p.PointTransctions)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PointTransctions_Members");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30);
        });

        modelBuilder.Entity<RolePermission>(entity =>
        {
            entity.HasOne(d => d.Permission).WithMany(p => p.RolePermissions)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RolePermissions_Permissions");

            entity.HasOne(d => d.Role).WithMany(p => p.RolePermissions)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RolePermissions_Roles");
        });

        modelBuilder.Entity<ServiceCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_CommentCategories");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}