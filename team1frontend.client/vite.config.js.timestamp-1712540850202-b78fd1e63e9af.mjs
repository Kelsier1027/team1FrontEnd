// vite.config.js
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///C:/Users/w6886/Desktop/%E5%B0%88%E9%A1%8C/%E5%A4%A7%E5%B0%88%E9%A1%8C/%E5%89%8D%E5%8F%B0/DEV/%E6%9C%80%E7%B5%82%E7%89%88/0407-1/team1frontend.client/node_modules/vite/dist/node/index.js";
import plugin from "file:///C:/Users/w6886/Desktop/%E5%B0%88%E9%A1%8C/%E5%A4%A7%E5%B0%88%E9%A1%8C/%E5%89%8D%E5%8F%B0/DEV/%E6%9C%80%E7%B5%82%E7%89%88/0407-1/team1frontend.client/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import fs from "fs";
import path from "path";
import child_process from "child_process";
import { env } from "process";
import AutoImport from "file:///C:/Users/w6886/Desktop/%E5%B0%88%E9%A1%8C/%E5%A4%A7%E5%B0%88%E9%A1%8C/%E5%89%8D%E5%8F%B0/DEV/%E6%9C%80%E7%B5%82%E7%89%88/0407-1/team1frontend.client/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///C:/Users/w6886/Desktop/%E5%B0%88%E9%A1%8C/%E5%A4%A7%E5%B0%88%E9%A1%8C/%E5%89%8D%E5%8F%B0/DEV/%E6%9C%80%E7%B5%82%E7%89%88/0407-1/team1frontend.client/node_modules/unplugin-vue-components/dist/vite.js";
import { ElementPlusResolver } from "file:///C:/Users/w6886/Desktop/%E5%B0%88%E9%A1%8C/%E5%A4%A7%E5%B0%88%E9%A1%8C/%E5%89%8D%E5%8F%B0/DEV/%E6%9C%80%E7%B5%82%E7%89%88/0407-1/team1frontend.client/node_modules/unplugin-vue-components/dist/resolvers.js";
var __vite_injected_original_import_meta_url = "file:///C:/Users/w6886/Desktop/%E5%B0%88%E9%A1%8C/%E5%A4%A7%E5%B0%88%E9%A1%8C/%E5%89%8D%E5%8F%B0/DEV/%E6%9C%80%E7%B5%82%E7%89%88/0407-1/team1frontend.client/vite.config.js";
var baseFolder = env.APPDATA !== void 0 && env.APPDATA !== "" ? `${env.APPDATA}/ASP.NET/https` : `${env.HOME}/.aspnet/https`;
var certificateName = "team1frontend.client";
var certFilePath = path.join(baseFolder, `${certificateName}.pem`);
var keyFilePath = path.join(baseFolder, `${certificateName}.key`);
if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
  if (0 !== child_process.spawnSync(
    "dotnet",
    [
      "dev-certs",
      "https",
      "--export-path",
      certFilePath,
      "--format",
      "Pem",
      "--no-password"
    ],
    { stdio: "inherit" }
  ).status) {
    throw new Error("Could not create certificate.");
  }
}
var target = env.ASPNETCORE_HTTPS_PORT ? `https://localhost:${env.ASPNETCORE_HTTPS_PORT}` : env.ASPNETCORE_URLS ? env.ASPNETCORE_URLS.split(";")[0] : "https://localhost:7113";
var vite_config_default = defineConfig({
  plugins: [
    plugin(),
    AutoImport({
      resolvers: [ElementPlusResolver()]
    }),
    Components({
      resolvers: [ElementPlusResolver()]
    })
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  server: {
    proxy: {
      "^/api": {
        // 這裡的設定是將所有以 /api 開頭的請求轉發到目標伺服器，這樣就可以解決跨域問題
        target,
        secure: false
        // 這個選項是因為我們使用的是自簽憑證，如果選擇使用正式簽發的憑證，可以將這個選項設置為 true，開發環境下建議設置為 false，可以避免一些不必要的問題，例如以下的問題，如果設置為 true，則會報錯，因為自簽憑證不被信任
      }
    },
    port: 5173,
    https: {
      key: fs.readFileSync(keyFilePath),
      cert: fs.readFileSync(certFilePath)
    }
  },
  css: ["https://cdn.jsdelivr.net/npm/vuetify@3.5.8/dist/vuetify-labs.css"]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFx3Njg4NlxcXFxEZXNrdG9wXFxcXFx1NUMwOFx1OTg0Q1xcXFxcdTU5MjdcdTVDMDhcdTk4NENcXFxcXHU1MjREXHU1M0YwXFxcXERFVlxcXFxcdTY3MDBcdTdENDJcdTcyNDhcXFxcMDQwNy0xXFxcXHRlYW0xZnJvbnRlbmQuY2xpZW50XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFx3Njg4NlxcXFxEZXNrdG9wXFxcXFx1NUMwOFx1OTg0Q1xcXFxcdTU5MjdcdTVDMDhcdTk4NENcXFxcXHU1MjREXHU1M0YwXFxcXERFVlxcXFxcdTY3MDBcdTdENDJcdTcyNDhcXFxcMDQwNy0xXFxcXHRlYW0xZnJvbnRlbmQuY2xpZW50XFxcXHZpdGUuY29uZmlnLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy93Njg4Ni9EZXNrdG9wLyVFNSVCMCU4OCVFOSVBMSU4Qy8lRTUlQTQlQTclRTUlQjAlODglRTklQTElOEMvJUU1JTg5JThEJUU1JThGJUIwL0RFVi8lRTYlOUMlODAlRTclQjUlODIlRTclODklODgvMDQwNy0xL3RlYW0xZnJvbnRlbmQuY2xpZW50L3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHsgZmlsZVVSTFRvUGF0aCwgVVJMIH0gZnJvbSAnbm9kZTp1cmwnO1xyXG5cclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSc7XHJcbmltcG9ydCBwbHVnaW4gZnJvbSAnQHZpdGVqcy9wbHVnaW4tdnVlJztcclxuaW1wb3J0IGZzIGZyb20gJ2ZzJztcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xyXG5pbXBvcnQgeyBlbnYgfSBmcm9tICdwcm9jZXNzJztcclxuLy9lbGVtZW50XHU2MzA5XHU5NzAwXHU1RjE1XHU1MTY1XHJcbmltcG9ydCBBdXRvSW1wb3J0IGZyb20gJ3VucGx1Z2luLWF1dG8taW1wb3J0L3ZpdGUnO1xyXG5pbXBvcnQgQ29tcG9uZW50cyBmcm9tICd1bnBsdWdpbi12dWUtY29tcG9uZW50cy92aXRlJztcclxuaW1wb3J0IHsgRWxlbWVudFBsdXNSZXNvbHZlciB9IGZyb20gJ3VucGx1Z2luLXZ1ZS1jb21wb25lbnRzL3Jlc29sdmVycyc7XHJcbi8vIGltcG9ydCBWdWV0aWZ5UGx1Z2luIGZyb20gJ3ZpdGUtcGx1Z2luLXZ1ZXRpZnknO1xyXG5cclxuY29uc3QgYmFzZUZvbGRlciA9XHJcbiAgICBlbnYuQVBQREFUQSAhPT0gdW5kZWZpbmVkICYmIGVudi5BUFBEQVRBICE9PSAnJ1xyXG4gICAgICAgID8gYCR7ZW52LkFQUERBVEF9L0FTUC5ORVQvaHR0cHNgXHJcbiAgICAgICAgOiBgJHtlbnYuSE9NRX0vLmFzcG5ldC9odHRwc2A7XHJcblxyXG5jb25zdCBjZXJ0aWZpY2F0ZU5hbWUgPSAndGVhbTFmcm9udGVuZC5jbGllbnQnO1xyXG5jb25zdCBjZXJ0RmlsZVBhdGggPSBwYXRoLmpvaW4oYmFzZUZvbGRlciwgYCR7Y2VydGlmaWNhdGVOYW1lfS5wZW1gKTtcclxuY29uc3Qga2V5RmlsZVBhdGggPSBwYXRoLmpvaW4oYmFzZUZvbGRlciwgYCR7Y2VydGlmaWNhdGVOYW1lfS5rZXlgKTtcclxuXHJcbmlmICghZnMuZXhpc3RzU3luYyhjZXJ0RmlsZVBhdGgpIHx8ICFmcy5leGlzdHNTeW5jKGtleUZpbGVQYXRoKSkge1xyXG4gICAgaWYgKFxyXG4gICAgICAgIDAgIT09XHJcbiAgICAgICAgY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoXHJcbiAgICAgICAgICAgICdkb3RuZXQnLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnZGV2LWNlcnRzJyxcclxuICAgICAgICAgICAgICAgICdodHRwcycsXHJcbiAgICAgICAgICAgICAgICAnLS1leHBvcnQtcGF0aCcsXHJcbiAgICAgICAgICAgICAgICBjZXJ0RmlsZVBhdGgsXHJcbiAgICAgICAgICAgICAgICAnLS1mb3JtYXQnLFxyXG4gICAgICAgICAgICAgICAgJ1BlbScsXHJcbiAgICAgICAgICAgICAgICAnLS1uby1wYXNzd29yZCcsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHsgc3RkaW86ICdpbmhlcml0JyB9XHJcbiAgICAgICAgKS5zdGF0dXNcclxuICAgICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGNyZWF0ZSBjZXJ0aWZpY2F0ZS4nKTtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgdGFyZ2V0ID0gZW52LkFTUE5FVENPUkVfSFRUUFNfUE9SVFxyXG4gICAgPyBgaHR0cHM6Ly9sb2NhbGhvc3Q6JHtlbnYuQVNQTkVUQ09SRV9IVFRQU19QT1JUfWBcclxuICAgIDogZW52LkFTUE5FVENPUkVfVVJMU1xyXG4gICAgICAgID8gZW52LkFTUE5FVENPUkVfVVJMUy5zcGxpdCgnOycpWzBdXHJcbiAgICAgICAgOiAnaHR0cHM6Ly9sb2NhbGhvc3Q6NzExMyc7XHJcblxyXG4vLyBjb25zb2xlLmxvZyhrZXlGaWxlUGF0aCwgJ3x8fHx8JywgY2VydEZpbGVQYXRoKTtcclxuLy8gY29uc29sZS5sb2codGFyZ2V0KTtcclxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcclxuICAgIHBsdWdpbnM6IFtcclxuICAgICAgICBwbHVnaW4oKSxcclxuICAgICAgICBBdXRvSW1wb3J0KHtcclxuICAgICAgICAgICAgcmVzb2x2ZXJzOiBbRWxlbWVudFBsdXNSZXNvbHZlcigpXSxcclxuICAgICAgICB9KSxcclxuICAgICAgICBDb21wb25lbnRzKHtcclxuICAgICAgICAgICAgcmVzb2x2ZXJzOiBbRWxlbWVudFBsdXNSZXNvbHZlcigpXSxcclxuICAgICAgICB9KSxcclxuICAgIF0sXHJcbiAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgYWxpYXM6IHtcclxuICAgICAgICAgICAgJ0AnOiBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4vc3JjJywgaW1wb3J0Lm1ldGEudXJsKSksXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBzZXJ2ZXI6IHtcclxuICAgICAgICBwcm94eToge1xyXG4gICAgICAgICAgICAnXi9hcGknOiB7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTkwMTlcdTg4RTFcdTc2ODRcdThBMkRcdTVCOUFcdTY2MkZcdTVDMDdcdTYyNDBcdTY3MDlcdTRFRTUgL2FwaSBcdTk1OEJcdTk4MkRcdTc2ODRcdThBQ0JcdTZDNDJcdThGNDlcdTc2N0NcdTUyMzBcdTc2RUVcdTZBMTlcdTRGM0FcdTY3MERcdTU2NjhcdUZGMENcdTkwMTlcdTZBMjNcdTVDMzFcdTUzRUZcdTRFRTVcdTg5RTNcdTZDN0FcdThERThcdTU3REZcdTU1NEZcdTk4NENcclxuICAgICAgICAgICAgICAgIHRhcmdldCxcclxuICAgICAgICAgICAgICAgIHNlY3VyZTogZmFsc2UsIC8vIFx1OTAxOVx1NTAwQlx1OTA3OFx1OTgwNVx1NjYyRlx1NTZFMFx1NzBCQVx1NjIxMVx1NTAxMVx1NEY3Rlx1NzUyOFx1NzY4NFx1NjYyRlx1ODFFQVx1N0MzRFx1NjE5MVx1OEI0OVx1RkYwQ1x1NTk4Mlx1Njc5Q1x1OTA3OFx1NjRDN1x1NEY3Rlx1NzUyOFx1NkI2M1x1NUYwRlx1N0MzRFx1NzY3Q1x1NzY4NFx1NjE5MVx1OEI0OVx1RkYwQ1x1NTNFRlx1NEVFNVx1NUMwN1x1OTAxOVx1NTAwQlx1OTA3OFx1OTgwNVx1OEEyRFx1N0Y2RVx1NzBCQSB0cnVlXHVGRjBDXHU5NThCXHU3NjdDXHU3NEIwXHU1ODgzXHU0RTBCXHU1RUZBXHU4QjcwXHU4QTJEXHU3RjZFXHU3MEJBIGZhbHNlXHVGRjBDXHU1M0VGXHU0RUU1XHU5MDdGXHU1MTREXHU0RTAwXHU0RTlCXHU0RTBEXHU1RkM1XHU4OTgxXHU3Njg0XHU1NTRGXHU5ODRDXHVGRjBDXHU0RjhCXHU1OTgyXHU0RUU1XHU0RTBCXHU3Njg0XHU1NTRGXHU5ODRDXHVGRjBDXHU1OTgyXHU2NzlDXHU4QTJEXHU3RjZFXHU3MEJBIHRydWVcdUZGMENcdTUyNDdcdTY3MDNcdTU4MzFcdTkzMkZcdUZGMENcdTU2RTBcdTcwQkFcdTgxRUFcdTdDM0RcdTYxOTFcdThCNDlcdTRFMERcdTg4QUJcdTRGRTFcdTRFRkJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvcnQ6IDUxNzMsXHJcbiAgICAgICAgaHR0cHM6IHtcclxuICAgICAgICAgICAga2V5OiBmcy5yZWFkRmlsZVN5bmMoa2V5RmlsZVBhdGgpLFxyXG4gICAgICAgICAgICBjZXJ0OiBmcy5yZWFkRmlsZVN5bmMoY2VydEZpbGVQYXRoKSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGNzczogWydodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL3Z1ZXRpZnlAMy41LjgvZGlzdC92dWV0aWZ5LWxhYnMuY3NzJ10sXHJcbn0pO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQW9lLFNBQVMsZUFBZSxXQUFXO0FBRXZnQixTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFlBQVk7QUFDbkIsT0FBTyxRQUFRO0FBQ2YsT0FBTyxVQUFVO0FBQ2pCLE9BQU8sbUJBQW1CO0FBQzFCLFNBQVMsV0FBVztBQUVwQixPQUFPLGdCQUFnQjtBQUN2QixPQUFPLGdCQUFnQjtBQUN2QixTQUFTLDJCQUEyQjtBQVhpTyxJQUFNLDJDQUEyQztBQWN0VCxJQUFNLGFBQ0YsSUFBSSxZQUFZLFVBQWEsSUFBSSxZQUFZLEtBQ3ZDLEdBQUcsSUFBSSxPQUFPLG1CQUNkLEdBQUcsSUFBSSxJQUFJO0FBRXJCLElBQU0sa0JBQWtCO0FBQ3hCLElBQU0sZUFBZSxLQUFLLEtBQUssWUFBWSxHQUFHLGVBQWUsTUFBTTtBQUNuRSxJQUFNLGNBQWMsS0FBSyxLQUFLLFlBQVksR0FBRyxlQUFlLE1BQU07QUFFbEUsSUFBSSxDQUFDLEdBQUcsV0FBVyxZQUFZLEtBQUssQ0FBQyxHQUFHLFdBQVcsV0FBVyxHQUFHO0FBQzdELE1BQ0ksTUFDQSxjQUFjO0FBQUEsSUFDVjtBQUFBLElBQ0E7QUFBQSxNQUNJO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDSjtBQUFBLElBQ0EsRUFBRSxPQUFPLFVBQVU7QUFBQSxFQUN2QixFQUFFLFFBQ0o7QUFDRSxVQUFNLElBQUksTUFBTSwrQkFBK0I7QUFBQSxFQUNuRDtBQUNKO0FBRUEsSUFBTSxTQUFTLElBQUksd0JBQ2IscUJBQXFCLElBQUkscUJBQXFCLEtBQzlDLElBQUksa0JBQ0EsSUFBSSxnQkFBZ0IsTUFBTSxHQUFHLEVBQUUsQ0FBQyxJQUNoQztBQUtWLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQ3hCLFNBQVM7QUFBQSxJQUNMLE9BQU87QUFBQSxJQUNQLFdBQVc7QUFBQSxNQUNQLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztBQUFBLElBQ3JDLENBQUM7QUFBQSxJQUNELFdBQVc7QUFBQSxNQUNQLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQztBQUFBLElBQ3JDLENBQUM7QUFBQSxFQUNMO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDTCxPQUFPO0FBQUEsTUFDSCxLQUFLLGNBQWMsSUFBSSxJQUFJLFNBQVMsd0NBQWUsQ0FBQztBQUFBLElBQ3hEO0FBQUEsRUFDSjtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ0osT0FBTztBQUFBLE1BQ0gsU0FBUztBQUFBO0FBQUEsUUFFTDtBQUFBLFFBQ0EsUUFBUTtBQUFBO0FBQUEsTUFDWjtBQUFBLElBQ0o7QUFBQSxJQUNBLE1BQU07QUFBQSxJQUNOLE9BQU87QUFBQSxNQUNILEtBQUssR0FBRyxhQUFhLFdBQVc7QUFBQSxNQUNoQyxNQUFNLEdBQUcsYUFBYSxZQUFZO0FBQUEsSUFDdEM7QUFBQSxFQUNKO0FBQUEsRUFDQSxLQUFLLENBQUMsa0VBQWtFO0FBQzVFLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
